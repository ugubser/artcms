#!/bin/bash

# Firebase Production Setup Script
# This script helps setup Firebase project for production deployment

set -e

echo "🚀 Firebase Production Setup Script"
echo "=================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check if Firebase CLI is installed
if ! command -v firebase &> /dev/null; then
    echo -e "${RED}❌ Firebase CLI is not installed${NC}"
    echo "Please install it with: npm install -g firebase-tools"
    exit 1
fi

# Check if logged in to Firebase
if ! firebase projects:list &> /dev/null; then
    echo -e "${YELLOW}⚠️  Not logged in to Firebase${NC}"
    echo "Please login first with: firebase login"
    exit 1
fi

echo -e "${BLUE}📋 Current Firebase Projects:${NC}"
firebase projects:list

echo ""
echo -e "${YELLOW}🔧 Setting up production project...${NC}"

# Get project ID from user
read -p "Enter your production Firebase project ID: " PROJECT_ID

if [ -z "$PROJECT_ID" ]; then
    echo -e "${RED}❌ Project ID cannot be empty${NC}"
    exit 1
fi

# Update .firebaserc with production project
echo -e "${BLUE}📝 Updating .firebaserc...${NC}"
cat > .firebaserc << EOF
{
  "projects": {
    "default": "$PROJECT_ID",
    "dev": "tribecaconcepts-9c"
  }
}
EOF

echo -e "${GREEN}✅ Updated .firebaserc${NC}"

# Get Firebase config from user
echo ""
echo -e "${YELLOW}🔑 Enter your Firebase configuration:${NC}"
echo "You can find these values in your Firebase Console > Project Settings > General"
echo ""

read -p "API Key: " API_KEY
read -p "Auth Domain: " AUTH_DOMAIN
read -p "Storage Bucket: " STORAGE_BUCKET
read -p "Messaging Sender ID: " SENDER_ID
read -p "App ID: " APP_ID

# Create production environment file
echo -e "${BLUE}📝 Creating .env.production file...${NC}"
cat > .env.production << EOF
# Firebase Production Configuration
# Generated by setup-firebase.sh on $(date)

FIREBASE_API_KEY=$API_KEY
FIREBASE_AUTH_DOMAIN=$AUTH_DOMAIN
FIREBASE_PROJECT_ID=$PROJECT_ID
FIREBASE_STORAGE_BUCKET=$STORAGE_BUCKET
FIREBASE_MESSAGING_SENDER_ID=$SENDER_ID
FIREBASE_APP_ID=$APP_ID
EOF

echo -e "${GREEN}✅ Created .env.production${NC}"

# Create local copy for testing
cp .env.production .env.local
echo -e "${GREEN}✅ Created .env.local for local testing${NC}"

echo ""
echo -e "${YELLOW}🔐 Security Configuration Required:${NC}"
echo "Before deployment, you need to:"
echo "1. Enable Google Authentication in Firebase Console"
echo "2. Add admin email addresses to the whitelist in:"
echo "   - src/app/services/auth.service.ts (line 14-18)"
echo "   - firestore.rules (line 7-11)"
echo "   - storage.rules (line 7-11)"
echo ""

# Ask about admin email setup
read -p "Do you want to add admin emails now? (y/n): " ADD_EMAILS

if [ "$ADD_EMAILS" = "y" ] || [ "$ADD_EMAILS" = "Y" ]; then
    echo ""
    echo -e "${BLUE}📧 Admin Email Configuration${NC}"
    echo "Enter admin email addresses (press Enter with empty line to finish):"
    
    ADMIN_EMAILS=()
    while true; do
        read -p "Admin email: " EMAIL
        if [ -z "$EMAIL" ]; then
            break
        fi
        ADMIN_EMAILS+=("$EMAIL")
    done
    
    if [ ${#ADMIN_EMAILS[@]} -gt 0 ]; then
        echo ""
        echo -e "${GREEN}✅ Admin emails to configure:${NC}"
        for email in "${ADMIN_EMAILS[@]}"; do
            echo "   - $email"
        done
        
        echo ""
        echo -e "${YELLOW}⚠️  Remember to manually add these emails to:${NC}"
        echo "   - src/app/services/auth.service.ts (adminEmails array)"
        echo "   - firestore.rules (isAdmin function)"
        echo "   - storage.rules (isAdmin function)"
    fi
fi

echo ""
echo -e "${GREEN}🎉 Firebase setup complete!${NC}"
echo ""
echo -e "${BLUE}📋 Next steps:${NC}"
echo "1. Enable Google Authentication in Firebase Console"
echo "2. Add admin emails to the codebase (if not done already)"
echo "3. Run: npm run build:prod"
echo "4. Run: firebase deploy"
echo ""
echo -e "${YELLOW}⚠️  Important: The .env.production file contains sensitive data.${NC}"
echo "It's already in .gitignore and should never be committed to version control."